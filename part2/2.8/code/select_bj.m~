function [best_bj_sys,best_red_bj_sys] = select_bj(varargin)
%SELECT OUTPUT ERROR MODEL
%System Identification & Modeling
%
%Author:
%SANDER SWITSERS
%r00462339
%KULeuven
%
%Date:
%10-1-2018

%% init
%set sizes
L_val = 200 ;
L_test_1 = 200 ;
L_test_2 = 200 ;
L_learn = 1000 ;

%parameter search ranges
nb_range = 13:19 ;
nf_range = 13:19 ;

%misc
delay = 14 ;
opt = simOptions('AddNoise',false);

%% datasets
if (nargin == 12)
    input_val = varargin{1};
    input_test_1 = varargin{2};
    input_test_2 = varargin{3};
    input_learn = varargin{4};
    output_val = varargin{5};
    output_test_1 = varargin{6};
    output_test_2 = varargin{7};
    output_learn = varargin{8};
    data_val = varargin{9};
    data_test_1 = varargin{10};
    data_test_2 = varargin{11};
    data_learn = varargin{12};
    
else
    %validation set
    input_val = randn(L_val,1) ;
    output_val = exercise2(input_val) ;
    output_val = preprocess(output_val) ;
    input_val = input_val(1:end-delay) ;
    data_val = iddata(output_val, input_val) ;
    
    %test set #1
    input_test_1 = randn(L_test_1,1) ;
    output_test_1 = exercise2(input_test_1) ;
    output_test_1 = preprocess(output_test_1) ;
    input_test_1 = input_test_1(1:end-delay) ;
    data_test_1 = iddata(output_test_1, input_test_1) ;
    
    %test set #2
    input_test_2 = randn(L_test_2,1) ;
    output_test_2 = exercise2(input_test_2) ;
    output_test_2 = preprocess(output_test_2) ;
    input_test_2 = input_test_2(1:end-delay) ;
    data_test_2 = iddata(output_test_2, input_test_2) ;
    
    %learning set
    input_learn = randn(L_learn,1) ;
    output_learn = exercise2(input_learn) ;
    output_learn = preprocess(output_learn) ;
    input_learn = input_learn(1:end-delay) ;
    data_learn = iddata(output_learn, input_learn) ;
end

%% parameters
%prealloc
nb_length = length(nb_range) ;
nf_length = length(nf_range) ;
nc_length = length(nc_range) ;
nd_length = length(nd_range) ;
bj_fit_results = zeros(nb_length,nf_length,nc_length,nd_length) ;
bj_aic_results = zeros(nb_length,nf_length,nc_length,nd_length) ;
bj_orders = zeros(nb_length,nf_length,nc_length,nd_length,5) ;

%loop
for idx_nb = 1:nb_length
    for idx_nf = 1:nf_length
        for idx_nc = 1:nc_length
            for idx_nd = 1:nd_length
                nb = nb_range(idx_nb) ;
                nf = nf_range(idx_nf) ;
                nc = nc_range(idx_nc) ;
                nd = nd_range(idx_nd) ;
                nk = 0; %preprocess suppressed the delay
                
                order = [nb,nf,nc,nd,nk] ;
                bj_sys = bj (data_learn, order) ;
                output_bj = sim(bj_sys,input_test_2,opt) ;
                
                bj_fit = fit_test(output_bj,output_test_2) ;
                bj_aic = aic(bj_sys) ;
                
                bj_fit_results(idx_nb,idx_nf,idx_nc) = bj_fit ;
                bj_aic_results(idx_nb,idx_nf,idx_nc) = bj_aic ;
                bj_orders(idx_nb,idx_nf,idx_nc,idx_nd,:) = order ;
            end
        end
    end
end

%% select model
[best_bj_aic,index_min] = min(bj_aic_results(:)) ;
[index_min_nb,index_min_nf,index_min_nc,index_min_nd] = ind2sub(size(bj_aic_results),index_min);
best_order = bj_orders(index_min_nb,index_min_nf,index_min_nc,index_min_nd,:) ;
best_order = transpose(squeeze(best_order));
best_bj_sys = bj (data_learn, best_order);

%% find reduced model
bj_ss = ss(best_bj_sys);
figure; hsvd(bj_ss);

red_bj_fit_results = zeros(8,2);
red_orders = 7:14;

%values for n chosen from hsvd
for n = 1:length(red_orders)
    order = red_orders(n);
    
    red_bj_ss = balred(bj_ss,order);
    red_bj_sys = idpoly(red_bj_ss) ;
    output_bj = sim(red_bj_sys,input_test_2,opt) ;
        
    red_bj_fit = fit_test(output_bj,output_test_2) ;
    red_bj_fit_results(n,:) = [red_orders(n),red_bj_fit];
end

% order 11 is a good compromise
red_bj_ss =balred(bj_ss,11);
best_red_bj_sys = idpoly(red_bj_ss);

%% plots
%bode
output_val_bj = sim(best_bj_sys,input_val,opt) ;
[magnitudes_bj,phases_bj,freqs_bj] = bode(best_bj_sys) ;
magnitudes_bj = squeeze(magnitudes_bj) ;
phases_bj = squeeze(phases_bj) ;

output_val_red_bj = sim(best_red_bj_sys,input_val,opt) ;
[magnitudes_red_bj,phases_red_bj,freqs_red_bj] = bode(best_red_bj_sys) ;
magnitudes_red_bj = squeeze(magnitudes_red_bj) ;
phases_red_bj = squeeze(phases_red_bj) ;

load 'bode_experiment.mat' ;
figure ;
subplot(1,2,1) ; hold on ;
plot(rel_freqs_est,mag2db(magnitudes_est),'--k') ; 
plot(freqs_bj,mag2db(magnitudes_bj),'-k') ;
%plot(freqs_red_,mag2db(magnitudes_red_armax),'-.k') ;
plot(rel_freqs_est,0*rel_freqs_est,':k') ;
title('Bode plot') ;
xlabel('Relative frequency [f/f_s]') ; ylabel('Intensity [dB]') ;
axis([0 pi -inf inf]) ;
% legend('Estimated','ARMAX','red ARMAX') ;
legend('Estimated','BJ') ;

%poles
[p_bj,z_bj] = pzmap(best_bj_sys) ;
p_bj_x = real(p_bj) ; p_bj_y = imag(p_bj) ;
z_bj_x = real(z_bj) ; z_bj_y = imag(p_bj) ;

subplot(1,2,2) ; hold on ;
plot(p_bj_x,p_bj_y,'ok') ; plot(z_bj_x,z_bj_y,'*k') ;
title('Pole-Zero map of estimated model') ;
xlabel('Real part') ; ylabel('Imaginary part') ;
legend('Poles','Zeros') ;
r = 1 ; x = 0 ; y = 0 ;
th = 0:pi/50:2*pi;
xunit = r * cos(th) + x ;
yunit = r * sin(th) + y ;
plot(xunit, yunit,':k') ;
line([0 0], get(gca, 'xlim'),'Color','black','LineStyle',':') ;
line(get(gca, 'ylim'), [0 0],'Color','black','LineStyle',':') ;
axis([-2 2 -2 2]) ;

figure;
compare(data_val,best_bj_sys);

figure;
resid(data_val,best_bj_sys);
% subplot(1,2,1); hold on;
% resid(data_val,best_armax_sys);
% 
% subplot(1,2,2); hold on;
% resid(data_val,best_red_armax_sys);